1. load_dotenv(), CLOVASPEECH_API_KEY = os.getenv("CLOVASPEECH_API"),  CLOVASPEECH_URL = os.getenv("CLOVASPEECH_INVOKE_URL") 코드로 API, URL을 받아옴.
2. class ClovaSpeechClient의 req_upload()로 실제 audio를 CLOVA Speech에 넘김.
3. if not os.path.exists(audio_path):
        print(f"❌ 파일 없음: {audio_path}")
        return
위 기능은 현재 main에 그대로 있는데 이 기능을 따로 메소드화하여 import로 불러와서 사용가능하게 변경하고 싶음.
+ 현재는 경로에 실제 파일이 있는지 없는지만 확인하지만 그 파일이 오디오파일인지를 확인하는 기능을 추가 희망.
4. setup_output_paths(): 오디오 파일의 경로를 받음 -> 파일명으로 폴더명과 output될 json, txt의 파일명을 정해서 반환. 예) 오디오 파일명이 test.wav라면 test.txt, test_result.json (파일명을 더 직관적이게 변경할 필요 있음.)
경로가 하드코딩 되어있어. 프로젝트 위치가 달라질 경우 꼬일 수 있기 때문에 변경필요
예) def setup_output_paths(audio_path: str, base_dir: str = "result"):

5. audio_path(오디오경로), diarization(화자분리 기능 True/False)로 나누어서 그값으로 CLOVA Speech API를 호출하여 requests.Response(HTTP 통신의 상태 코드, 헤더, 본문(JSON 등)을 모두 포함하는 구조)라는 반환값을 가짐. 그 값에서 우리가 필요한 값인 json을 사용하기 위해 res.json()을 반환하는코드.
6. 반환값을 process_segments()메소드에 넣어 text 파일에 들어갈 음성인식 출력 포멧에 맞는 출력이 나오고 리스트로 리턴.
같은 기능을 하는 코드가 여러번 있어서 가독성도 별로며, 코드를 봤을때 어떤 코드인지 모르겠는 부분이 있어서 나눠서 메소드로 관리하는 식으로 하면 후에 출력포멧이 바꿔도, 혹은 출력포맷을 여럿 만들때도 용이할 것으로 보임.
현재 이 메소드를 가장 리팩토링할 부분이 많다고 생각. 우선 기능별로 모든 기능을 메소드화하여 어떤 코드인지 알 수 있고 코드에 대한 설명도 주석으로 적어주는게 좋다고 생각.

7. save_results()메소드에서 결과값을 각각 지정된 경로에 저장. 이때 json, txt 저장되는 코드가 같이 있는데 이 기능은 분리 필요.
이유) 단일 책임 원칙 위반, 재사용성을 고려했을때 좋지 않음. 따로 save_text_result, save_json_result로 분리.

#여기에 추가할것
예를들어. 현재 코드는 json, txt까지 뽑아지는코드지만 json하나만 뽑고싶을수도있고, 혹은 그 json의 segments를 이용해서 txt를 뽑을때 다른 식으로 넣거나, document형식으로 나올 수 있게(추후에) 만들 수 있는 메소드를 일단 pass로 넣어두던가 그런식으로 가능할듯


load_dotenv() -> api_key.py
class ClovaSpeechClient() -> clova_speech_client.py (클라이언트 클래스 메소드)
setup_output_paths() -> clova_speech_io.py(오디오파일 경로 input, 결과 폴더에 줄 파일명 output)
call_clova_api() -> clova_speech_api.py(api 호출)
process_segments() -> segments_to_text.py(segments의 값중 필요한 값만 받아서 텍스트로 반환해주는 메소드)
save_results() -> save_text_result(), save_json_result() -> clova_speech_io.py(txt파일, json파일을 각각 지정된 경로에 파일을 생성해서 저장)

project_root/
├── clova/
│   ├── clova_speech_client.py       # API 통신 전담 (requests)
│   ├── clova_speech_api.py             # ClovaSpeechClient 호출 + 결과 파싱
│   ├── clova_speech_io.py           # 파일 입출력 유틸 (setup_output_paths, save_xxx)
│   ├── api_key.py                   # 환경변수/키 관리 (load_dotenv 포함)
│   ├── segments_to_text.py
│   └── __init__.py
├── result/
│   └── ...
└── run_clova_stt.py                 # main() 실행부

